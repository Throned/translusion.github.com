<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Julia on Trans lusion </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://translusion.github.com/categories/julia/index.xml</link>
    <language>en-us</language>
    <author>Erik Engheim</author>
    
    <updated>Sun, 14 Dec 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Beautiful Julia: Cool language constructs and Tricks for Beginners</title>
      <link>http://translusion.github.com/posts/beautiful-julia/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 UTC</pubDate>
      <author>Erik Engheim</author>
      <guid>http://translusion.github.com/posts/beautiful-julia/</guid>
      <description>

&lt;p&gt;I just read &lt;a href=&#34;http://www.hackerearth.com/notes/praveen97uma/beautiful-python-some-cool-language-constructs-and-tricks-for-beginners/&#34;&gt;this blog&lt;/a&gt; about cool language constructs in Python. Before clicking it I thought to myself are there cool things only Python can do or could I easily replicate this in my favorite script language, &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So without further ado, her are some examples.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Reverse an iterable&lt;/h3&gt;

&lt;p&gt;There are two ways of doing this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; a = [1, 2, 4]
 3-element Array{Int64,1}:
  1
  2
  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most obvious way is the &lt;code&gt;reverse&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; reverse(a)
 3-element Array{Int64,1}:
  4
  2
  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can also do something similar to the Python example, exept Julia requires you to be a bit more explicit about the start and end of the slice&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; julia&amp;gt; a[end:-1:1]
 3-element Array{Int64,1}:
  4
  2
  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This of course works for any types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; reverse(b)
(4,3,2)

julia&amp;gt; b[end:-1:1]
(4,3,2)

julia&amp;gt; c = &amp;quot;This is a string&amp;quot;
&amp;quot;This is a string&amp;quot;

julia&amp;gt; reverse(c)
&amp;quot;gnirts a si sihT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Julia follows the Ruby convention of suffixing with &lt;code&gt;!&lt;/code&gt; if the function is mutating, so we can be confident these functions created copies.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Swapping the values of two variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; a, b = 1, 2
(1,2)

julia&amp;gt; a, b = b, a
(2,1)

julia&amp;gt; a
2

julia&amp;gt; b
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the python example, the author Praveen Kumar disassembled the Python code to demonstrate how it worked by showing the bytecode. That will be quite different for &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; as Julia JITs different implementations based on the types of arguments. That is why Julia is so fast. E.g. when we define a function that swaps in Julia we get a generic function which will be specialized when called by the Just in Time compiler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; foo(a, b) = a, b = b, a
foo (generic function with 1 method)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So when dumping the assembly with &lt;code&gt;code_native&lt;/code&gt; we have to specify what the types of arguments  will be as second argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; code_native(foo, (Int, Int))
    .section    __TEXT,__text,regular,pure_instructions
Filename: none
Source line: 1
    push    RBP
    mov RBP, RSP
Source line: 1
    movq    XMM1, RDI
    movq    XMM0, RSI
    punpcklqdq  XMM0, XMM1      ## xmm0 = xmm0[0],xmm1[0]
    pop RBP
    ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want the bytecode like Python we get something that I consider less readable as it is LLVM based which contains a lot of type information to be able to generate efficient machien code output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; code_llvm(foo, (Int, Int))

define &amp;lt;2 x i64&amp;gt; @&amp;quot;julia_foo;20220&amp;quot;(i64, i64) {
top:
  %2 = insertelement &amp;lt;2 x i64&amp;gt; undef, i64 %1, i32 0, !dbg !1422, !julia_type !1423
  %3 = insertelement &amp;lt;2 x i64&amp;gt; %2, i64 %0, i32 1, !dbg !1422, !julia_type !1423
  ret &amp;lt;2 x i64&amp;gt; %3, !dbg !1422
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn&amp;rsquo;t obviously readable so we need to consult the &lt;a href=&#34;http://llvm.org/releases/2.6/docs/LangRef.html&#34;&gt;LLVM reference&lt;/a&gt; manual. &lt;a href=&#34;http://llvm.org/releases/2.6/docs/LangRef.html#i_insertelement&#34;&gt;insertelement&lt;/a&gt; is instruction which insert an element into a vector at given index.&lt;/p&gt;

&lt;p&gt;First part &lt;code&gt;&amp;lt;2 x i64&amp;gt;&lt;/code&gt; is a type annotation saying we are operating on a 2 element 64 bit integer vector.&lt;/p&gt;

&lt;p&gt;First argument is the vector register to operate on. In the first case that is &lt;code&gt;undef&lt;/code&gt; while in the next line it is &lt;code&gt;%2&lt;/code&gt;, which is where the result of the first line was put.&lt;/p&gt;

&lt;p&gt;Second argument &lt;code&gt;i64 %1&lt;/code&gt; says we are inserting a 64 bit integer element. Where is given in third argument: &lt;code&gt;i32 0&lt;/code&gt;. Insert at index 0 (given as a 32 bit integer).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll leave it as a readers excercise to figure out exactly how this performs a swap as going into the nitty bitty details of this was not the intention of this blog post.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Enumerate&lt;/h3&gt;

&lt;p&gt;Interestingly the &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; approach for iterating over both index and value is almost identical to that of Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; for (index, value) in enumerate([&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;zoo&amp;quot;])
         println(index, &amp;quot; &amp;quot; , value)
       end
1 foo
2 bar
3 zoo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Splitting a string into a list of words and joining them back&lt;/h3&gt;

&lt;p&gt;Splitting and joining is similar to Python except Julia isn&amp;rsquo;t really object oriented so function name comes first as Julia uses multiple dispatch to decide which implementation to call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; b = split(&amp;quot;This is a string&amp;quot;)
4-element Array{SubString{ASCIIString},1}:
 &amp;quot;This&amp;quot;  
 &amp;quot;is&amp;quot;    
 &amp;quot;a&amp;quot;     
 &amp;quot;string&amp;quot;

julia&amp;gt; join(b, &amp;quot; &amp;quot;)
&amp;quot;This is a string&amp;quot;

julia&amp;gt; join(b, &amp;quot;, &amp;quot;)
&amp;quot;This, is, a, string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesting functions call is sometimes hard to read, so Julia offers the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator to write the code in similar sequence as with object oriented languages .e.g:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; &amp;quot;This is a string&amp;quot; |&amp;gt; split |&amp;gt; join
&amp;quot;Thisisastring&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;List Comprehensions&lt;/h3&gt;

&lt;p&gt;The traditional imperative way transforming on list to a new one is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = String[]
0-element Array{String,1}

julia&amp;gt; for word in L
           push!(M, word[1:3])
       end

julia&amp;gt; M
4-element Array{String,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite similar to the Python example except Julia lists havea type so you have to specify that it is a String. You can create a python like array but then you need to specify that it takes any element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = Any[]
0-element Array{Any,1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With list comperhensions you can do this more elegantly with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = [word[1:3] for word in L]
4-element Array{Any,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However for &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; it would be more idiomatic to express what you are doing. E.g. in this case we are mapping from one array to another which we can express like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; M = map(word -&amp;gt;  word[1:3], L)
4-element Array{ASCIIString,1}:
 &amp;quot;Jul&amp;quot;
 &amp;quot;mak&amp;quot;
 &amp;quot;peo&amp;quot;
 &amp;quot;lov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to filter a list by producing a new list containg only the elements with length greater than 5 we would do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for word in L
  if length(word) &amp;gt; 5
    push!(M, word)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Python we could solve this with a list comperhension however with Julia you have to explicity state that you are filtering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M = filter(word -&amp;gt; length(word) &amp;gt; 5, L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for this is that Julia has bultin support for multidimensional arrays, given that it was designed for scientific computing where this is important. There is no natural way to filter a multi dimensional array, as e.g. every row in a matrix needs to have the same number of columns.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Munching Data with Julia</title>
      <link>http://translusion.github.com/posts/munchingdata-julia/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 UTC</pubDate>
      <author>Erik Engheim</author>
      <guid>http://translusion.github.com/posts/munchingdata-julia/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently performed a survey at my work using &lt;a href=&#34;http://www.google.com/google-d-s/createforms.html&#34;&gt;Google form&lt;/a&gt;, unfortunatle the data wasn&amp;rsquo;t usable right out of the box, because it my company allowed people to register an answer multiple times, but one person should just have one vote.&lt;/p&gt;

&lt;p&gt;I chose to clean the data with &lt;a href=&#34;http://julialang.org&#34;&gt;the Julia programming language&lt;/a&gt;, which might not be the best choice for this sort of thing. Not because julia isn&amp;rsquo;t suited but because SQL, sed or awk might do such a specialized and simple task faster. Unfortunately I am crappy at all 3. The data looked like this (anonymized):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5/8/2014 10:32:14   spam@mycompany.no   Bonus   2,5%   40%       4,42%
5/8/2014 10:35:03   bar@mycompany.no    Higher salary     2,9%   37,5%    3,9%
5/8/2014 10:41:10   spam@mycompany.no   Bonus   2,5%   40%       4,42%
5/8/2014 10:45:10   foo@mycompany.no    Higher salary    2,9%   37,5%    3,9%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I exported it with tab as separator since some of the columns used comma in the text. In Europe we often use comma instead of dot for separating decimals.&lt;/p&gt;

&lt;p&gt;So the task was to eliminate to double or more votes, keeping only the most recent choice. So e.g. in our example &lt;em&gt;spam&lt;/em&gt; voted twice. So the 1st line needs to be elimenated and the 3rd kept.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Read the data&lt;/h3&gt;

&lt;p&gt;First we read in our data. Indicating that data is separated with tab and that first line is a header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ourdata, header) = readdlm(&amp;quot;result.tsv&amp;quot;, &#39;\t&#39;, has_header=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a 2D array (matrix) which sounds neat. Well it is quite neat in a lot of ways. I can ask for e.g. the whole second column containing the email of the respondents with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ourdata[:,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I instead wanted the 3rd row I could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ourdata[3, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is &lt;strong&gt;NOT neat&lt;/strong&gt; about it compared to the regular arrays within arrays found in languages such a python and ruby is that you can&amp;rsquo;t process this with a &lt;code&gt;foreach&lt;/code&gt; type of construct. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for row in ourdata
   dostuff(row)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;row&lt;/code&gt; will in this case just be a substring and not an actual array object.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Find unique rows&lt;/h3&gt;

&lt;p&gt;Instead you have to iterate by index:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byname = Dict{String, Any}()
for i in 1:size(ourdata,1)
    byname[ourdata[i, 2]] = ourdata[i, :]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we are doing here is to record each line on email. Thus only the last line for a given email get stored. Previous duplicated gets discareded. Just what we want. &lt;code&gt;size(ourdata, 1)&lt;/code&gt; gives us the number of rows. &lt;code&gt;size(ourdata, 2)&lt;/code&gt; would have given number of columns. &lt;code&gt;length(ourdata)&lt;/code&gt; or &lt;code&gt;size(ourdata)&lt;/code&gt; would not have worked because this is not an array of arrays. So your usual python or ruby reflexes don&amp;rsquo;t apply.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Count each line matching a predicate&lt;/h3&gt;

&lt;p&gt;So to check how many of our respondents wanted higher bonus we do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count(values(byname)) do row
    row[3] == &amp;quot;Bonus   2,5%   40%       4,42%&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to get those who want higher salary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count(values(byname)) do row
    row[3] == &amp;quot;Higher salary    2,9%   37,5%    3,9%&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Working with Dates in Julia&lt;/h3&gt;

&lt;p&gt;When I first started looking at this problem, I thought I needed to work with dates, which wasn&amp;rsquo;t necessary because the data was already sorted by date and time, but if it wasn&amp;rsquo;t you need to get hold of the julia &lt;a href=&#34;https://github.com/karbarcca/Datetime.jl&#34;&gt;datetime package&lt;/a&gt;. There isn&amp;rsquo;t anything builtin to deal with dates. Here are some practical examples on how to use it. Our data had date and time like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5/8/2014 0:16:03
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which isn&amp;rsquo;t the format the package deals with date and time. So here are some tricks for how to convert:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(d, t) = split(&amp;quot;5/8/2014 0:16:03&amp;quot;) # Put date in d, and time t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then turn this into a formate our date creation function &lt;code&gt;date&lt;/code&gt; wants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date(reverse(map(int, split(d, &#39;/&#39;)))...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Iteratively creating code in the Julia REPL&lt;/h3&gt;

&lt;p&gt;That was a &lt;em&gt;mouthfull&lt;/em&gt;. Usually when writing lines like this I develop them interactively by starting with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; split(d, &#39;/&#39;)
3-element Array{String,1}:
 &amp;quot;5&amp;quot;   
 &amp;quot;8&amp;quot;   
 &amp;quot;2014&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks like what I wanted, but the data is string and I need integers so I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hit arrow up button to get back &lt;code&gt;split&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+A to go to start of line and write &lt;code&gt;map(int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+E to get to end of line and close it with &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives me the next line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; map(int, split(d, &#39;/&#39;))
3-element Array{Int64,1}:
    5
    8
 2014
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks good, but not in reverse order compared to what &lt;code&gt;date&lt;/code&gt; wants. So we do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; reverse(map(int, split(d, &#39;/&#39;)))
3-element Array{Int64,1}:
 2014
    8
    5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay so we are good, except &lt;code&gt;date&lt;/code&gt; doesn&amp;rsquo;t take an array as argument. So we need to explode our array to function arguments with the &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>